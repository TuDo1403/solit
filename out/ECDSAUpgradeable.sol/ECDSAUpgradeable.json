{
  "abi": [],
  "bytecode": {
    "object": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089883b45c3356b0d8cc63b543883fe8d33abd3f48091e81923524214ab39308864736f6c63430008150033",
    "sourceMap": "380:8783:44:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;380:8783:44;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122089883b45c3356b0d8cc63b543883fe8d33abd3f48091e81923524214ab39308864736f6c63430008150033",
    "sourceMap": "380:8783:44:-:0;;;;;;;;",
    "linkReferences": {}
  },
  "methodIdentifiers": {},
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":\"ECDSAUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@solit/contracts/=contracts/\",\":contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":sample-projects/=node_modules/hardhat/sample-projects/\",\":solady/=node_modules/solady/\",\":solmate/=node_modules/solmate/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "@solit/contracts/=contracts/",
        "contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/",
        "sample-projects/=node_modules/hardhat/sample-projects/",
        "solady/=node_modules/solady/",
        "solmate/=node_modules/solmate/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 1000000
      },
      "metadata": {
        "useLiteralContent": true,
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": "ECDSAUpgradeable"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
        "keccak256": "0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n",
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
        "keccak256": "0xa014f65d84b02827055d99993ccdbfb4b56b2c9e91eb278d82a93330659d06e4",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n",
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
        "keccak256": "0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n",
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
        "keccak256": "0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a",
        "urls": [],
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n",
        "license": "MIT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": {}
  },
  "userdoc": {
    "version": 1,
    "kind": "user"
  },
  "devdoc": {
    "version": 1,
    "kind": "dev",
    "details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address."
  },
  "ast": {
    "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol",
    "id": 48673,
    "exportedSymbols": {
      "ECDSAUpgradeable": [
        48672
      ],
      "MathUpgradeable": [
        49878
      ],
      "SignedMathUpgradeable": [
        49983
      ],
      "StringsUpgradeable": [
        48306
      ]
    },
    "nodeType": "SourceUnit",
    "src": "112:9052:44",
    "nodes": [
      {
        "id": 48308,
        "nodeType": "PragmaDirective",
        "src": "112:23:44",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 48309,
        "nodeType": "ImportDirective",
        "src": "137:35:44",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol",
        "file": "../StringsUpgradeable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 48673,
        "sourceUnit": 48307,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 48672,
        "nodeType": "ContractDefinition",
        "src": "380:8783:44",
        "nodes": [
          {
            "id": 48316,
            "nodeType": "EnumDefinition",
            "src": "411:175:44",
            "nodes": [],
            "canonicalName": "ECDSAUpgradeable.RecoverError",
            "members": [
              {
                "id": 48311,
                "name": "NoError",
                "nameLocation": "439:7:44",
                "nodeType": "EnumValue",
                "src": "439:7:44"
              },
              {
                "id": 48312,
                "name": "InvalidSignature",
                "nameLocation": "456:16:44",
                "nodeType": "EnumValue",
                "src": "456:16:44"
              },
              {
                "id": 48313,
                "name": "InvalidSignatureLength",
                "nameLocation": "482:22:44",
                "nodeType": "EnumValue",
                "src": "482:22:44"
              },
              {
                "id": 48314,
                "name": "InvalidSignatureS",
                "nameLocation": "514:17:44",
                "nodeType": "EnumValue",
                "src": "514:17:44"
              },
              {
                "id": 48315,
                "name": "InvalidSignatureV",
                "nameLocation": "541:17:44",
                "nodeType": "EnumValue",
                "src": "541:17:44"
              }
            ],
            "name": "RecoverError",
            "nameLocation": "416:12:44"
          },
          {
            "id": 48360,
            "nodeType": "FunctionDefinition",
            "src": "592:511:44",
            "nodes": [],
            "body": {
              "id": 48359,
              "nodeType": "Block",
              "src": "646:457:44",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_RecoverError_$48316",
                      "typeString": "enum ECDSAUpgradeable.RecoverError"
                    },
                    "id": 48325,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 48322,
                      "name": "error",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48319,
                      "src": "660:5:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 48323,
                        "name": "RecoverError",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48316,
                        "src": "669:12:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                          "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                        }
                      },
                      "id": 48324,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberLocation": "682:7:44",
                      "memberName": "NoError",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 48311,
                      "src": "669:20:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      }
                    },
                    "src": "660:29:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "condition": {
                      "commonType": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      },
                      "id": 48331,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 48328,
                        "name": "error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48319,
                        "src": "756:5:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "==",
                      "rightExpression": {
                        "expression": {
                          "id": 48329,
                          "name": "RecoverError",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48316,
                          "src": "765:12:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                            "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "id": 48330,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "778:16:44",
                        "memberName": "InvalidSignature",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 48312,
                        "src": "765:29:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      },
                      "src": "756:38:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseBody": {
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        },
                        "id": 48340,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 48337,
                          "name": "error",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48319,
                          "src": "865:5:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RecoverError_$48316",
                            "typeString": "enum ECDSAUpgradeable.RecoverError"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 48338,
                            "name": "RecoverError",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48316,
                            "src": "874:12:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                              "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                            }
                          },
                          "id": 48339,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "887:22:44",
                          "memberName": "InvalidSignatureLength",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 48313,
                          "src": "874:35:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_RecoverError_$48316",
                            "typeString": "enum ECDSAUpgradeable.RecoverError"
                          }
                        },
                        "src": "865:44:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_RecoverError_$48316",
                            "typeString": "enum ECDSAUpgradeable.RecoverError"
                          },
                          "id": 48349,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 48346,
                            "name": "error",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48319,
                            "src": "987:5:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_RecoverError_$48316",
                              "typeString": "enum ECDSAUpgradeable.RecoverError"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 48347,
                              "name": "RecoverError",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48316,
                              "src": "996:12:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                                "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                              }
                            },
                            "id": 48348,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberLocation": "1009:17:44",
                            "memberName": "InvalidSignatureS",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 48314,
                            "src": "996:30:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_RecoverError_$48316",
                              "typeString": "enum ECDSAUpgradeable.RecoverError"
                            }
                          },
                          "src": "987:39:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 48355,
                        "nodeType": "IfStatement",
                        "src": "983:114:44",
                        "trueBody": {
                          "id": 48354,
                          "nodeType": "Block",
                          "src": "1028:69:44",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
                                    "id": 48351,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1049:36:44",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                                      "typeString": "literal_string \"ECDSA: invalid signature 's' value\""
                                    },
                                    "value": "ECDSA: invalid signature 's' value"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                                      "typeString": "literal_string \"ECDSA: invalid signature 's' value\""
                                    }
                                  ],
                                  "id": 48350,
                                  "name": "revert",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    -19,
                                    -19
                                  ],
                                  "referencedDeclaration": -19,
                                  "src": "1042:6:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (string memory) pure"
                                  }
                                },
                                "id": 48352,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1042:44:44",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 48353,
                              "nodeType": "ExpressionStatement",
                              "src": "1042:44:44"
                            }
                          ]
                        }
                      },
                      "id": 48356,
                      "nodeType": "IfStatement",
                      "src": "861:236:44",
                      "trueBody": {
                        "id": 48345,
                        "nodeType": "Block",
                        "src": "911:66:44",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                                  "id": 48342,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "932:33:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                                    "typeString": "literal_string \"ECDSA: invalid signature length\""
                                  },
                                  "value": "ECDSA: invalid signature length"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                                    "typeString": "literal_string \"ECDSA: invalid signature length\""
                                  }
                                ],
                                "id": 48341,
                                "name": "revert",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [
                                  -19,
                                  -19
                                ],
                                "referencedDeclaration": -19,
                                "src": "925:6:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                  "typeString": "function (string memory) pure"
                                }
                              },
                              "id": 48343,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "925:41:44",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 48344,
                            "nodeType": "ExpressionStatement",
                            "src": "925:41:44"
                          }
                        ]
                      }
                    },
                    "id": 48357,
                    "nodeType": "IfStatement",
                    "src": "752:345:44",
                    "trueBody": {
                      "id": 48336,
                      "nodeType": "Block",
                      "src": "796:59:44",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                                "id": 48333,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "string",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "817:26:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                                  "typeString": "literal_string \"ECDSA: invalid signature\""
                                },
                                "value": "ECDSA: invalid signature"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                                  "typeString": "literal_string \"ECDSA: invalid signature\""
                                }
                              ],
                              "id": 48332,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [
                                -19,
                                -19
                              ],
                              "referencedDeclaration": -19,
                              "src": "810:6:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (string memory) pure"
                              }
                            },
                            "id": 48334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "810:34:44",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 48335,
                          "nodeType": "ExpressionStatement",
                          "src": "810:34:44"
                        }
                      ]
                    }
                  },
                  "id": 48358,
                  "nodeType": "IfStatement",
                  "src": "656:441:44",
                  "trueBody": {
                    "id": 48327,
                    "nodeType": "Block",
                    "src": "691:55:44",
                    "statements": [
                      {
                        "functionReturnParameters": 48321,
                        "id": 48326,
                        "nodeType": "Return",
                        "src": "705:7:44"
                      }
                    ]
                  }
                }
              ]
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_throwError",
            "nameLocation": "601:11:44",
            "parameters": {
              "id": 48320,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48319,
                  "mutability": "mutable",
                  "name": "error",
                  "nameLocation": "626:5:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48360,
                  "src": "613:18:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RecoverError_$48316",
                    "typeString": "enum ECDSAUpgradeable.RecoverError"
                  },
                  "typeName": {
                    "id": 48318,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 48317,
                      "name": "RecoverError",
                      "nameLocations": [
                        "613:12:44"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 48316,
                      "src": "613:12:44"
                    },
                    "referencedDeclaration": 48316,
                    "src": "613:12:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RecoverError_$48316",
                      "typeString": "enum ECDSAUpgradeable.RecoverError"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "612:20:44"
            },
            "returnParameters": {
              "id": 48321,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "646:0:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "private"
          },
          {
            "id": 48406,
            "nodeType": "FunctionDefinition",
            "src": "2167:730:44",
            "nodes": [],
            "body": {
              "id": 48405,
              "nodeType": "Block",
              "src": "2271:626:44",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 48376,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 48373,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48365,
                        "src": "2285:9:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 48374,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "2295:6:44",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "2285:16:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "hexValue": "3635",
                      "id": 48375,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2305:2:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_65_by_1",
                        "typeString": "int_const 65"
                      },
                      "value": "65"
                    },
                    "src": "2285:22:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 48403,
                    "nodeType": "Block",
                    "src": "2810:81:44",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 48397,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2840:1:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 48396,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2832:7:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 48395,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "2832:7:44",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 48398,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2832:10:44",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 48399,
                                "name": "RecoverError",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48316,
                                "src": "2844:12:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                                  "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                                }
                              },
                              "id": 48400,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "2857:22:44",
                              "memberName": "InvalidSignatureLength",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 48313,
                              "src": "2844:35:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_RecoverError_$48316",
                                "typeString": "enum ECDSAUpgradeable.RecoverError"
                              }
                            }
                          ],
                          "id": 48401,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "2831:49:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                            "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "functionReturnParameters": 48372,
                        "id": 48402,
                        "nodeType": "Return",
                        "src": "2824:56:44"
                      }
                    ]
                  },
                  "id": 48404,
                  "nodeType": "IfStatement",
                  "src": "2281:610:44",
                  "trueBody": {
                    "id": 48394,
                    "nodeType": "Block",
                    "src": "2309:495:44",
                    "statements": [
                      {
                        "assignments": [
                          48378
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 48378,
                            "mutability": "mutable",
                            "name": "r",
                            "nameLocation": "2331:1:44",
                            "nodeType": "VariableDeclaration",
                            "scope": 48394,
                            "src": "2323:9:44",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 48377,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "2323:7:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 48379,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2323:9:44"
                      },
                      {
                        "assignments": [
                          48381
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 48381,
                            "mutability": "mutable",
                            "name": "s",
                            "nameLocation": "2354:1:44",
                            "nodeType": "VariableDeclaration",
                            "scope": 48394,
                            "src": "2346:9:44",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            "typeName": {
                              "id": 48380,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "2346:7:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 48382,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2346:9:44"
                      },
                      {
                        "assignments": [
                          48384
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 48384,
                            "mutability": "mutable",
                            "name": "v",
                            "nameLocation": "2375:1:44",
                            "nodeType": "VariableDeclaration",
                            "scope": 48394,
                            "src": "2369:7:44",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            "typeName": {
                              "id": 48383,
                              "name": "uint8",
                              "nodeType": "ElementaryTypeName",
                              "src": "2369:5:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 48385,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2369:7:44"
                      },
                      {
                        "AST": {
                          "nativeSrc": "2577:171:44",
                          "nodeType": "YulBlock",
                          "src": "2577:171:44",
                          "statements": [
                            {
                              "nativeSrc": "2595:32:44",
                              "nodeType": "YulAssignment",
                              "src": "2595:32:44",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "signature",
                                        "nativeSrc": "2610:9:44",
                                        "nodeType": "YulIdentifier",
                                        "src": "2610:9:44"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2621:4:44",
                                        "nodeType": "YulLiteral",
                                        "src": "2621:4:44",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2606:3:44",
                                      "nodeType": "YulIdentifier",
                                      "src": "2606:3:44"
                                    },
                                    "nativeSrc": "2606:20:44",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2606:20:44"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "2600:5:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2600:5:44"
                                },
                                "nativeSrc": "2600:27:44",
                                "nodeType": "YulFunctionCall",
                                "src": "2600:27:44"
                              },
                              "variableNames": [
                                {
                                  "name": "r",
                                  "nativeSrc": "2595:1:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2595:1:44"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2644:32:44",
                              "nodeType": "YulAssignment",
                              "src": "2644:32:44",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "signature",
                                        "nativeSrc": "2659:9:44",
                                        "nodeType": "YulIdentifier",
                                        "src": "2659:9:44"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2670:4:44",
                                        "nodeType": "YulLiteral",
                                        "src": "2670:4:44",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2655:3:44",
                                      "nodeType": "YulIdentifier",
                                      "src": "2655:3:44"
                                    },
                                    "nativeSrc": "2655:20:44",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2655:20:44"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "2649:5:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2649:5:44"
                                },
                                "nativeSrc": "2649:27:44",
                                "nodeType": "YulFunctionCall",
                                "src": "2649:27:44"
                              },
                              "variableNames": [
                                {
                                  "name": "s",
                                  "nativeSrc": "2644:1:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2644:1:44"
                                }
                              ]
                            },
                            {
                              "nativeSrc": "2693:41:44",
                              "nodeType": "YulAssignment",
                              "src": "2693:41:44",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2703:1:44",
                                    "nodeType": "YulLiteral",
                                    "src": "2703:1:44",
                                    "type": "",
                                    "value": "0"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "signature",
                                            "nativeSrc": "2716:9:44",
                                            "nodeType": "YulIdentifier",
                                            "src": "2716:9:44"
                                          },
                                          {
                                            "kind": "number",
                                            "nativeSrc": "2727:4:44",
                                            "nodeType": "YulLiteral",
                                            "src": "2727:4:44",
                                            "type": "",
                                            "value": "0x60"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nativeSrc": "2712:3:44",
                                          "nodeType": "YulIdentifier",
                                          "src": "2712:3:44"
                                        },
                                        "nativeSrc": "2712:20:44",
                                        "nodeType": "YulFunctionCall",
                                        "src": "2712:20:44"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mload",
                                      "nativeSrc": "2706:5:44",
                                      "nodeType": "YulIdentifier",
                                      "src": "2706:5:44"
                                    },
                                    "nativeSrc": "2706:27:44",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2706:27:44"
                                  }
                                ],
                                "functionName": {
                                  "name": "byte",
                                  "nativeSrc": "2698:4:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2698:4:44"
                                },
                                "nativeSrc": "2698:36:44",
                                "nodeType": "YulFunctionCall",
                                "src": "2698:36:44"
                              },
                              "variableNames": [
                                {
                                  "name": "v",
                                  "nativeSrc": "2693:1:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "2693:1:44"
                                }
                              ]
                            }
                          ]
                        },
                        "documentation": "@solidity memory-safe-assembly",
                        "evmVersion": "paris",
                        "externalReferences": [
                          {
                            "declaration": 48378,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2595:1:44",
                            "valueSize": 1
                          },
                          {
                            "declaration": 48381,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2644:1:44",
                            "valueSize": 1
                          },
                          {
                            "declaration": 48365,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2610:9:44",
                            "valueSize": 1
                          },
                          {
                            "declaration": 48365,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2659:9:44",
                            "valueSize": 1
                          },
                          {
                            "declaration": 48365,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2716:9:44",
                            "valueSize": 1
                          },
                          {
                            "declaration": 48384,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2693:1:44",
                            "valueSize": 1
                          }
                        ],
                        "id": 48386,
                        "nodeType": "InlineAssembly",
                        "src": "2568:180:44"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 48388,
                              "name": "hash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48363,
                              "src": "2779:4:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 48389,
                              "name": "v",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48384,
                              "src": "2785:1:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "id": 48390,
                              "name": "r",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48378,
                              "src": "2788:1:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 48391,
                              "name": "s",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 48381,
                              "src": "2791:1:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 48387,
                            "name": "tryRecover",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              48406,
                              48480,
                              48574
                            ],
                            "referencedDeclaration": 48574,
                            "src": "2768:10:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$48316_$",
                              "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"
                            }
                          },
                          "id": 48392,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2768:25:44",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                            "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "functionReturnParameters": 48372,
                        "id": 48393,
                        "nodeType": "Return",
                        "src": "2761:32:44"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 48361,
              "nodeType": "StructuredDocumentation",
              "src": "1109:1053:44",
              "text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tryRecover",
            "nameLocation": "2176:10:44",
            "parameters": {
              "id": 48366,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48363,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "2195:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48406,
                  "src": "2187:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48362,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2187:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48365,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "2214:9:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48406,
                  "src": "2201:22:44",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 48364,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2201:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2186:38:44"
            },
            "returnParameters": {
              "id": 48372,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48368,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48406,
                  "src": "2248:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48367,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2248:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48371,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48406,
                  "src": "2257:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RecoverError_$48316",
                    "typeString": "enum ECDSAUpgradeable.RecoverError"
                  },
                  "typeName": {
                    "id": 48370,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 48369,
                      "name": "RecoverError",
                      "nameLocations": [
                        "2257:12:44"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 48316,
                      "src": "2257:12:44"
                    },
                    "referencedDeclaration": 48316,
                    "src": "2257:12:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RecoverError_$48316",
                      "typeString": "enum ECDSAUpgradeable.RecoverError"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2247:23:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48433,
            "nodeType": "FunctionDefinition",
            "src": "3683:227:44",
            "nodes": [],
            "body": {
              "id": 48432,
              "nodeType": "Block",
              "src": "3770:140:44",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    48417,
                    48420
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48417,
                      "mutability": "mutable",
                      "name": "recovered",
                      "nameLocation": "3789:9:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48432,
                      "src": "3781:17:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 48416,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3781:7:44",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 48420,
                      "mutability": "mutable",
                      "name": "error",
                      "nameLocation": "3813:5:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48432,
                      "src": "3800:18:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      },
                      "typeName": {
                        "id": 48419,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 48418,
                          "name": "RecoverError",
                          "nameLocations": [
                            "3800:12:44"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 48316,
                          "src": "3800:12:44"
                        },
                        "referencedDeclaration": 48316,
                        "src": "3800:12:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48425,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 48422,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48409,
                        "src": "3833:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48423,
                        "name": "signature",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48411,
                        "src": "3839:9:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 48421,
                      "name": "tryRecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48406,
                        48480,
                        48574
                      ],
                      "referencedDeclaration": 48406,
                      "src": "3822:10:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$48316_$",
                        "typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSAUpgradeable.RecoverError)"
                      }
                    },
                    "id": 48424,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3822:27:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                      "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3780:69:44"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 48427,
                        "name": "error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48420,
                        "src": "3871:5:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      ],
                      "id": 48426,
                      "name": "_throwError",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48360,
                      "src": "3859:11:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$48316_$returns$__$",
                        "typeString": "function (enum ECDSAUpgradeable.RecoverError) pure"
                      }
                    },
                    "id": 48428,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3859:18:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48429,
                  "nodeType": "ExpressionStatement",
                  "src": "3859:18:44"
                },
                {
                  "expression": {
                    "id": 48430,
                    "name": "recovered",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48417,
                    "src": "3894:9:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 48415,
                  "id": 48431,
                  "nodeType": "Return",
                  "src": "3887:16:44"
                }
              ]
            },
            "documentation": {
              "id": 48407,
              "nodeType": "StructuredDocumentation",
              "src": "2903:775:44",
              "text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recover",
            "nameLocation": "3692:7:44",
            "parameters": {
              "id": 48412,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48409,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "3708:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48433,
                  "src": "3700:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48408,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3700:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48411,
                  "mutability": "mutable",
                  "name": "signature",
                  "nameLocation": "3727:9:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48433,
                  "src": "3714:22:44",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 48410,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3714:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3699:38:44"
            },
            "returnParameters": {
              "id": 48415,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48414,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48433,
                  "src": "3761:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48413,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3761:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3760:9:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48480,
            "nodeType": "FunctionDefinition",
            "src": "4164:306:44",
            "nodes": [],
            "body": {
              "id": 48479,
              "nodeType": "Block",
              "src": "4267:203:44",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    48449
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48449,
                      "mutability": "mutable",
                      "name": "s",
                      "nameLocation": "4285:1:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48479,
                      "src": "4277:9:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 48448,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "4277:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48456,
                  "initialValue": {
                    "commonType": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    },
                    "id": 48455,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 48450,
                      "name": "vs",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48440,
                      "src": "4289:2:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "&",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
                          "id": 48453,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4302:66:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
                            "typeString": "int_const 5789...(69 digits omitted)...9967"
                          },
                          "value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
                            "typeString": "int_const 5789...(69 digits omitted)...9967"
                          }
                        ],
                        "id": 48452,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "4294:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_bytes32_$",
                          "typeString": "type(bytes32)"
                        },
                        "typeName": {
                          "id": 48451,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "4294:7:44",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 48454,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4294:75:44",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "4289:80:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4277:92:44"
                },
                {
                  "assignments": [
                    48458
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48458,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "4385:1:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48479,
                      "src": "4379:7:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 48457,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "4379:5:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48471,
                  "initialValue": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 48469,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "components": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 48466,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "id": 48463,
                                    "name": "vs",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 48440,
                                    "src": "4404:2:44",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes32",
                                      "typeString": "bytes32"
                                    }
                                  ],
                                  "id": 48462,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "4396:7:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_uint256_$",
                                    "typeString": "type(uint256)"
                                  },
                                  "typeName": {
                                    "id": 48461,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4396:7:44",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 48464,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4396:11:44",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">>",
                              "rightExpression": {
                                "hexValue": "323535",
                                "id": 48465,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4411:3:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_255_by_1",
                                  "typeString": "int_const 255"
                                },
                                "value": "255"
                              },
                              "src": "4396:18:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 48467,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "4395:20:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "hexValue": "3237",
                          "id": 48468,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4418:2:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_27_by_1",
                            "typeString": "int_const 27"
                          },
                          "value": "27"
                        },
                        "src": "4395:25:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 48460,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "4389:5:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_uint8_$",
                        "typeString": "type(uint8)"
                      },
                      "typeName": {
                        "id": 48459,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "4389:5:44",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 48470,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4389:32:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4379:42:44"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 48473,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48436,
                        "src": "4449:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48474,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48458,
                        "src": "4455:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 48475,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48438,
                        "src": "4458:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48476,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48449,
                        "src": "4461:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 48472,
                      "name": "tryRecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48406,
                        48480,
                        48574
                      ],
                      "referencedDeclaration": 48574,
                      "src": "4438:10:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$48316_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"
                      }
                    },
                    "id": 48477,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4438:25:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                      "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                    }
                  },
                  "functionReturnParameters": 48447,
                  "id": 48478,
                  "nodeType": "Return",
                  "src": "4431:32:44"
                }
              ]
            },
            "documentation": {
              "id": 48434,
              "nodeType": "StructuredDocumentation",
              "src": "3916:243:44",
              "text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tryRecover",
            "nameLocation": "4173:10:44",
            "parameters": {
              "id": 48441,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48436,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "4192:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48480,
                  "src": "4184:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48435,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4184:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48438,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "4206:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48480,
                  "src": "4198:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48437,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4198:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48440,
                  "mutability": "mutable",
                  "name": "vs",
                  "nameLocation": "4217:2:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48480,
                  "src": "4209:10:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48439,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4209:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4183:37:44"
            },
            "returnParameters": {
              "id": 48447,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48443,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48480,
                  "src": "4244:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48442,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4244:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48446,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48480,
                  "src": "4253:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RecoverError_$48316",
                    "typeString": "enum ECDSAUpgradeable.RecoverError"
                  },
                  "typeName": {
                    "id": 48445,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 48444,
                      "name": "RecoverError",
                      "nameLocations": [
                        "4253:12:44"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 48316,
                      "src": "4253:12:44"
                    },
                    "referencedDeclaration": 48316,
                    "src": "4253:12:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RecoverError_$48316",
                      "typeString": "enum ECDSAUpgradeable.RecoverError"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4243:23:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48510,
            "nodeType": "FunctionDefinition",
            "src": "4635:222:44",
            "nodes": [],
            "body": {
              "id": 48509,
              "nodeType": "Block",
              "src": "4721:136:44",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    48493,
                    48496
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48493,
                      "mutability": "mutable",
                      "name": "recovered",
                      "nameLocation": "4740:9:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48509,
                      "src": "4732:17:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 48492,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4732:7:44",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 48496,
                      "mutability": "mutable",
                      "name": "error",
                      "nameLocation": "4764:5:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48509,
                      "src": "4751:18:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      },
                      "typeName": {
                        "id": 48495,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 48494,
                          "name": "RecoverError",
                          "nameLocations": [
                            "4751:12:44"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 48316,
                          "src": "4751:12:44"
                        },
                        "referencedDeclaration": 48316,
                        "src": "4751:12:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48502,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 48498,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48483,
                        "src": "4784:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48499,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48485,
                        "src": "4790:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48500,
                        "name": "vs",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48487,
                        "src": "4793:2:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 48497,
                      "name": "tryRecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48406,
                        48480,
                        48574
                      ],
                      "referencedDeclaration": 48480,
                      "src": "4773:10:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$48316_$",
                        "typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"
                      }
                    },
                    "id": 48501,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4773:23:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                      "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "4731:65:44"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 48504,
                        "name": "error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48496,
                        "src": "4818:5:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      ],
                      "id": 48503,
                      "name": "_throwError",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48360,
                      "src": "4806:11:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$48316_$returns$__$",
                        "typeString": "function (enum ECDSAUpgradeable.RecoverError) pure"
                      }
                    },
                    "id": 48505,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "4806:18:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48506,
                  "nodeType": "ExpressionStatement",
                  "src": "4806:18:44"
                },
                {
                  "expression": {
                    "id": 48507,
                    "name": "recovered",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48493,
                    "src": "4841:9:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 48491,
                  "id": 48508,
                  "nodeType": "Return",
                  "src": "4834:16:44"
                }
              ]
            },
            "documentation": {
              "id": 48481,
              "nodeType": "StructuredDocumentation",
              "src": "4476:154:44",
              "text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recover",
            "nameLocation": "4644:7:44",
            "parameters": {
              "id": 48488,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48483,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "4660:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48510,
                  "src": "4652:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48482,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4652:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48485,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "4674:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48510,
                  "src": "4666:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48484,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4666:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48487,
                  "mutability": "mutable",
                  "name": "vs",
                  "nameLocation": "4685:2:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48510,
                  "src": "4677:10:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48486,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "4677:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4651:37:44"
            },
            "returnParameters": {
              "id": 48491,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48490,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48510,
                  "src": "4712:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48489,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4712:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4711:9:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48574,
            "nodeType": "FunctionDefinition",
            "src": "5031:1456:44",
            "nodes": [],
            "body": {
              "id": 48573,
              "nodeType": "Block",
              "src": "5142:1345:44",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 48532,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [
                        {
                          "id": 48529,
                          "name": "s",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48519,
                          "src": "6038:1:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "id": 48528,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6030:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint256_$",
                          "typeString": "type(uint256)"
                        },
                        "typeName": {
                          "id": 48527,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6030:7:44",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 48530,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6030:10:44",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": ">",
                    "rightExpression": {
                      "hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
                      "id": 48531,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "6043:66:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
                        "typeString": "int_const 5789...(69 digits omitted)...7168"
                      },
                      "value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
                    },
                    "src": "6030:79:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 48542,
                  "nodeType": "IfStatement",
                  "src": "6026:161:44",
                  "trueBody": {
                    "id": 48541,
                    "nodeType": "Block",
                    "src": "6111:76:44",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 48535,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6141:1:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 48534,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "6133:7:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 48533,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6133:7:44",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 48536,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6133:10:44",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 48537,
                                "name": "RecoverError",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48316,
                                "src": "6145:12:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                                  "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                                }
                              },
                              "id": 48538,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "6158:17:44",
                              "memberName": "InvalidSignatureS",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 48314,
                              "src": "6145:30:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_RecoverError_$48316",
                                "typeString": "enum ECDSAUpgradeable.RecoverError"
                              }
                            }
                          ],
                          "id": 48539,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "6132:44:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                            "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "functionReturnParameters": 48526,
                        "id": 48540,
                        "nodeType": "Return",
                        "src": "6125:51:44"
                      }
                    ]
                  }
                },
                {
                  "assignments": [
                    48544
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48544,
                      "mutability": "mutable",
                      "name": "signer",
                      "nameLocation": "6289:6:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48573,
                      "src": "6281:14:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 48543,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6281:7:44",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48551,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 48546,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48513,
                        "src": "6308:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48547,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48515,
                        "src": "6314:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 48548,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48517,
                        "src": "6317:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48549,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48519,
                        "src": "6320:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 48545,
                      "name": "ecrecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -6,
                      "src": "6298:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                      }
                    },
                    "id": 48550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6298:24:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6281:41:44"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 48557,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 48552,
                      "name": "signer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48544,
                      "src": "6336:6:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 48555,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6354:1:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 48554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "6346:7:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 48553,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6346:7:44",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 48556,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "6346:10:44",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "6336:20:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 48567,
                  "nodeType": "IfStatement",
                  "src": "6332:101:44",
                  "trueBody": {
                    "id": 48566,
                    "nodeType": "Block",
                    "src": "6358:75:44",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 48560,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6388:1:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 48559,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "6380:7:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 48558,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "6380:7:44",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 48561,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6380:10:44",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 48562,
                                "name": "RecoverError",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48316,
                                "src": "6392:12:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                                  "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                                }
                              },
                              "id": 48563,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "6405:16:44",
                              "memberName": "InvalidSignature",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 48312,
                              "src": "6392:29:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_RecoverError_$48316",
                                "typeString": "enum ECDSAUpgradeable.RecoverError"
                              }
                            }
                          ],
                          "id": 48564,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "6379:43:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                            "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "functionReturnParameters": 48526,
                        "id": 48565,
                        "nodeType": "Return",
                        "src": "6372:50:44"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "components": [
                      {
                        "id": 48568,
                        "name": "signer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48544,
                        "src": "6451:6:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "expression": {
                          "id": 48569,
                          "name": "RecoverError",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 48316,
                          "src": "6459:12:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_RecoverError_$48316_$",
                            "typeString": "type(enum ECDSAUpgradeable.RecoverError)"
                          }
                        },
                        "id": 48570,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberLocation": "6472:7:44",
                        "memberName": "NoError",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 48311,
                        "src": "6459:20:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      }
                    ],
                    "id": 48571,
                    "isConstant": false,
                    "isInlineArray": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "TupleExpression",
                    "src": "6450:30:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                      "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                    }
                  },
                  "functionReturnParameters": 48526,
                  "id": 48572,
                  "nodeType": "Return",
                  "src": "6443:37:44"
                }
              ]
            },
            "documentation": {
              "id": 48511,
              "nodeType": "StructuredDocumentation",
              "src": "4863:163:44",
              "text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "tryRecover",
            "nameLocation": "5040:10:44",
            "parameters": {
              "id": 48520,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48513,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "5059:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5051:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48512,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5051:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48515,
                  "mutability": "mutable",
                  "name": "v",
                  "nameLocation": "5071:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5065:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 48514,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "5065:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48517,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "5082:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5074:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48516,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5074:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48519,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "5093:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5085:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48518,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "5085:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5050:45:44"
            },
            "returnParameters": {
              "id": 48526,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48522,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5119:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48521,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5119:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48525,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48574,
                  "src": "5128:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_enum$_RecoverError_$48316",
                    "typeString": "enum ECDSAUpgradeable.RecoverError"
                  },
                  "typeName": {
                    "id": 48524,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 48523,
                      "name": "RecoverError",
                      "nameLocations": [
                        "5128:12:44"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 48316,
                      "src": "5128:12:44"
                    },
                    "referencedDeclaration": 48316,
                    "src": "5128:12:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_RecoverError_$48316",
                      "typeString": "enum ECDSAUpgradeable.RecoverError"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5118:23:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48607,
            "nodeType": "FunctionDefinition",
            "src": "6620:232:44",
            "nodes": [],
            "body": {
              "id": 48606,
              "nodeType": "Block",
              "src": "6714:138:44",
              "nodes": [],
              "statements": [
                {
                  "assignments": [
                    48589,
                    48592
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 48589,
                      "mutability": "mutable",
                      "name": "recovered",
                      "nameLocation": "6733:9:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48606,
                      "src": "6725:17:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 48588,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6725:7:44",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 48592,
                      "mutability": "mutable",
                      "name": "error",
                      "nameLocation": "6757:5:44",
                      "nodeType": "VariableDeclaration",
                      "scope": 48606,
                      "src": "6744:18:44",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_RecoverError_$48316",
                        "typeString": "enum ECDSAUpgradeable.RecoverError"
                      },
                      "typeName": {
                        "id": 48591,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 48590,
                          "name": "RecoverError",
                          "nameLocations": [
                            "6744:12:44"
                          ],
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 48316,
                          "src": "6744:12:44"
                        },
                        "referencedDeclaration": 48316,
                        "src": "6744:12:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 48599,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 48594,
                        "name": "hash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48577,
                        "src": "6777:4:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48595,
                        "name": "v",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48579,
                        "src": "6783:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      {
                        "id": 48596,
                        "name": "r",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48581,
                        "src": "6786:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 48597,
                        "name": "s",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48583,
                        "src": "6789:1:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      ],
                      "id": 48593,
                      "name": "tryRecover",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        48406,
                        48480,
                        48574
                      ],
                      "referencedDeclaration": 48574,
                      "src": "6766:10:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$48316_$",
                        "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSAUpgradeable.RecoverError)"
                      }
                    },
                    "id": 48598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6766:25:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$48316_$",
                      "typeString": "tuple(address,enum ECDSAUpgradeable.RecoverError)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "6724:67:44"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 48601,
                        "name": "error",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 48592,
                        "src": "6813:5:44",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_enum$_RecoverError_$48316",
                          "typeString": "enum ECDSAUpgradeable.RecoverError"
                        }
                      ],
                      "id": 48600,
                      "name": "_throwError",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 48360,
                      "src": "6801:11:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$48316_$returns$__$",
                        "typeString": "function (enum ECDSAUpgradeable.RecoverError) pure"
                      }
                    },
                    "id": 48602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6801:18:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 48603,
                  "nodeType": "ExpressionStatement",
                  "src": "6801:18:44"
                },
                {
                  "expression": {
                    "id": 48604,
                    "name": "recovered",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 48589,
                    "src": "6836:9:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 48587,
                  "id": 48605,
                  "nodeType": "Return",
                  "src": "6829:16:44"
                }
              ]
            },
            "documentation": {
              "id": 48575,
              "nodeType": "StructuredDocumentation",
              "src": "6493:122:44",
              "text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "recover",
            "nameLocation": "6629:7:44",
            "parameters": {
              "id": 48584,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48577,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "6645:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48607,
                  "src": "6637:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48576,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6637:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48579,
                  "mutability": "mutable",
                  "name": "v",
                  "nameLocation": "6657:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48607,
                  "src": "6651:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 48578,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "6651:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48581,
                  "mutability": "mutable",
                  "name": "r",
                  "nameLocation": "6668:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48607,
                  "src": "6660:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48580,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6660:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48583,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "6679:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48607,
                  "src": "6671:9:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48582,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "6671:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6636:45:44"
            },
            "returnParameters": {
              "id": 48587,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48586,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48607,
                  "src": "6705:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48585,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6705:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6704:9:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48617,
            "nodeType": "FunctionDefinition",
            "src": "7142:396:44",
            "nodes": [],
            "body": {
              "id": 48616,
              "nodeType": "Block",
              "src": "7228:310:44",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nativeSrc": "7384:148:44",
                    "nodeType": "YulBlock",
                    "src": "7384:148:44",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "7405:4:44",
                              "nodeType": "YulLiteral",
                              "src": "7405:4:44",
                              "type": "",
                              "value": "0x00"
                            },
                            {
                              "hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
                              "kind": "string",
                              "nativeSrc": "7411:34:44",
                              "nodeType": "YulLiteral",
                              "src": "7411:34:44",
                              "type": "",
                              "value": "\u0019Ethereum Signed Message:\n32"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "7398:6:44",
                            "nodeType": "YulIdentifier",
                            "src": "7398:6:44"
                          },
                          "nativeSrc": "7398:48:44",
                          "nodeType": "YulFunctionCall",
                          "src": "7398:48:44"
                        },
                        "nativeSrc": "7398:48:44",
                        "nodeType": "YulExpressionStatement",
                        "src": "7398:48:44"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "7466:4:44",
                              "nodeType": "YulLiteral",
                              "src": "7466:4:44",
                              "type": "",
                              "value": "0x1c"
                            },
                            {
                              "name": "hash",
                              "nativeSrc": "7472:4:44",
                              "nodeType": "YulIdentifier",
                              "src": "7472:4:44"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "7459:6:44",
                            "nodeType": "YulIdentifier",
                            "src": "7459:6:44"
                          },
                          "nativeSrc": "7459:18:44",
                          "nodeType": "YulFunctionCall",
                          "src": "7459:18:44"
                        },
                        "nativeSrc": "7459:18:44",
                        "nodeType": "YulExpressionStatement",
                        "src": "7459:18:44"
                      },
                      {
                        "nativeSrc": "7490:32:44",
                        "nodeType": "YulAssignment",
                        "src": "7490:32:44",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "7511:4:44",
                              "nodeType": "YulLiteral",
                              "src": "7511:4:44",
                              "type": "",
                              "value": "0x00"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "7517:4:44",
                              "nodeType": "YulLiteral",
                              "src": "7517:4:44",
                              "type": "",
                              "value": "0x3c"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nativeSrc": "7501:9:44",
                            "nodeType": "YulIdentifier",
                            "src": "7501:9:44"
                          },
                          "nativeSrc": "7501:21:44",
                          "nodeType": "YulFunctionCall",
                          "src": "7501:21:44"
                        },
                        "variableNames": [
                          {
                            "name": "message",
                            "nativeSrc": "7490:7:44",
                            "nodeType": "YulIdentifier",
                            "src": "7490:7:44"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": "@solidity memory-safe-assembly",
                  "evmVersion": "paris",
                  "externalReferences": [
                    {
                      "declaration": 48610,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "7472:4:44",
                      "valueSize": 1
                    },
                    {
                      "declaration": 48613,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "7490:7:44",
                      "valueSize": 1
                    }
                  ],
                  "id": 48615,
                  "nodeType": "InlineAssembly",
                  "src": "7375:157:44"
                }
              ]
            },
            "documentation": {
              "id": 48608,
              "nodeType": "StructuredDocumentation",
              "src": "6858:279:44",
              "text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toEthSignedMessageHash",
            "nameLocation": "7151:22:44",
            "parameters": {
              "id": 48611,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48610,
                  "mutability": "mutable",
                  "name": "hash",
                  "nameLocation": "7182:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48617,
                  "src": "7174:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48609,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7174:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7173:14:44"
            },
            "returnParameters": {
              "id": 48614,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48613,
                  "mutability": "mutable",
                  "name": "message",
                  "nameLocation": "7219:7:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48617,
                  "src": "7211:15:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48612,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7211:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7210:17:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48639,
            "nodeType": "FunctionDefinition",
            "src": "7823:207:44",
            "nodes": [],
            "body": {
              "id": 48638,
              "nodeType": "Block",
              "src": "7903:127:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
                            "id": 48628,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "7947:32:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
                              "typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
                            },
                            "value": "\u0019Ethereum Signed Message:\n"
                          },
                          {
                            "arguments": [
                              {
                                "expression": {
                                  "id": 48631,
                                  "name": "s",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 48620,
                                  "src": "8009:1:44",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 48632,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "8011:6:44",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "8009:8:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "id": 48629,
                                "name": "StringsUpgradeable",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 48306,
                                "src": "7981:18:44",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_contract$_StringsUpgradeable_$48306_$",
                                  "typeString": "type(library StringsUpgradeable)"
                                }
                              },
                              "id": 48630,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8000:8:44",
                              "memberName": "toString",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 48136,
                              "src": "7981:27:44",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory)"
                              }
                            },
                            "id": 48633,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "7981:37:44",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          {
                            "id": 48634,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48620,
                            "src": "8020:1:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
                              "typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
                            },
                            {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 48626,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "7930:3:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 48627,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "7934:12:44",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "7930:16:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 48635,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7930:92:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 48625,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "7920:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 48636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "7920:103:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 48624,
                  "id": 48637,
                  "nodeType": "Return",
                  "src": "7913:110:44"
                }
              ]
            },
            "documentation": {
              "id": 48618,
              "nodeType": "StructuredDocumentation",
              "src": "7544:274:44",
              "text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toEthSignedMessageHash",
            "nameLocation": "7832:22:44",
            "parameters": {
              "id": 48621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48620,
                  "mutability": "mutable",
                  "name": "s",
                  "nameLocation": "7868:1:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48639,
                  "src": "7855:14:44",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 48619,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "7855:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7854:16:44"
            },
            "returnParameters": {
              "id": 48624,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48623,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48639,
                  "src": "7894:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48622,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "7894:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7893:9:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48651,
            "nodeType": "FunctionDefinition",
            "src": "8369:397:44",
            "nodes": [],
            "body": {
              "id": 48650,
              "nodeType": "Block",
              "src": "8476:290:44",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nativeSrc": "8538:222:44",
                    "nodeType": "YulBlock",
                    "src": "8538:222:44",
                    "statements": [
                      {
                        "nativeSrc": "8552:22:44",
                        "nodeType": "YulVariableDeclaration",
                        "src": "8552:22:44",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nativeSrc": "8569:4:44",
                              "nodeType": "YulLiteral",
                              "src": "8569:4:44",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "mload",
                            "nativeSrc": "8563:5:44",
                            "nodeType": "YulIdentifier",
                            "src": "8563:5:44"
                          },
                          "nativeSrc": "8563:11:44",
                          "nodeType": "YulFunctionCall",
                          "src": "8563:11:44"
                        },
                        "variables": [
                          {
                            "name": "ptr",
                            "nativeSrc": "8556:3:44",
                            "nodeType": "YulTypedName",
                            "src": "8556:3:44",
                            "type": ""
                          }
                        ]
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nativeSrc": "8594:3:44",
                              "nodeType": "YulIdentifier",
                              "src": "8594:3:44"
                            },
                            {
                              "hexValue": "1901",
                              "kind": "string",
                              "nativeSrc": "8599:10:44",
                              "nodeType": "YulLiteral",
                              "src": "8599:10:44",
                              "type": "",
                              "value": "\u0019\u0001"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "8587:6:44",
                            "nodeType": "YulIdentifier",
                            "src": "8587:6:44"
                          },
                          "nativeSrc": "8587:23:44",
                          "nodeType": "YulFunctionCall",
                          "src": "8587:23:44"
                        },
                        "nativeSrc": "8587:23:44",
                        "nodeType": "YulExpressionStatement",
                        "src": "8587:23:44"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "ptr",
                                  "nativeSrc": "8634:3:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "8634:3:44"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "8639:4:44",
                                  "nodeType": "YulLiteral",
                                  "src": "8639:4:44",
                                  "type": "",
                                  "value": "0x02"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "8630:3:44",
                                "nodeType": "YulIdentifier",
                                "src": "8630:3:44"
                              },
                              "nativeSrc": "8630:14:44",
                              "nodeType": "YulFunctionCall",
                              "src": "8630:14:44"
                            },
                            {
                              "name": "domainSeparator",
                              "nativeSrc": "8646:15:44",
                              "nodeType": "YulIdentifier",
                              "src": "8646:15:44"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "8623:6:44",
                            "nodeType": "YulIdentifier",
                            "src": "8623:6:44"
                          },
                          "nativeSrc": "8623:39:44",
                          "nodeType": "YulFunctionCall",
                          "src": "8623:39:44"
                        },
                        "nativeSrc": "8623:39:44",
                        "nodeType": "YulExpressionStatement",
                        "src": "8623:39:44"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "name": "ptr",
                                  "nativeSrc": "8686:3:44",
                                  "nodeType": "YulIdentifier",
                                  "src": "8686:3:44"
                                },
                                {
                                  "kind": "number",
                                  "nativeSrc": "8691:4:44",
                                  "nodeType": "YulLiteral",
                                  "src": "8691:4:44",
                                  "type": "",
                                  "value": "0x22"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nativeSrc": "8682:3:44",
                                "nodeType": "YulIdentifier",
                                "src": "8682:3:44"
                              },
                              "nativeSrc": "8682:14:44",
                              "nodeType": "YulFunctionCall",
                              "src": "8682:14:44"
                            },
                            {
                              "name": "structHash",
                              "nativeSrc": "8698:10:44",
                              "nodeType": "YulIdentifier",
                              "src": "8698:10:44"
                            }
                          ],
                          "functionName": {
                            "name": "mstore",
                            "nativeSrc": "8675:6:44",
                            "nodeType": "YulIdentifier",
                            "src": "8675:6:44"
                          },
                          "nativeSrc": "8675:34:44",
                          "nodeType": "YulFunctionCall",
                          "src": "8675:34:44"
                        },
                        "nativeSrc": "8675:34:44",
                        "nodeType": "YulExpressionStatement",
                        "src": "8675:34:44"
                      },
                      {
                        "nativeSrc": "8722:28:44",
                        "nodeType": "YulAssignment",
                        "src": "8722:28:44",
                        "value": {
                          "arguments": [
                            {
                              "name": "ptr",
                              "nativeSrc": "8740:3:44",
                              "nodeType": "YulIdentifier",
                              "src": "8740:3:44"
                            },
                            {
                              "kind": "number",
                              "nativeSrc": "8745:4:44",
                              "nodeType": "YulLiteral",
                              "src": "8745:4:44",
                              "type": "",
                              "value": "0x42"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nativeSrc": "8730:9:44",
                            "nodeType": "YulIdentifier",
                            "src": "8730:9:44"
                          },
                          "nativeSrc": "8730:20:44",
                          "nodeType": "YulFunctionCall",
                          "src": "8730:20:44"
                        },
                        "variableNames": [
                          {
                            "name": "data",
                            "nativeSrc": "8722:4:44",
                            "nodeType": "YulIdentifier",
                            "src": "8722:4:44"
                          }
                        ]
                      }
                    ]
                  },
                  "documentation": "@solidity memory-safe-assembly",
                  "evmVersion": "paris",
                  "externalReferences": [
                    {
                      "declaration": 48647,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "8722:4:44",
                      "valueSize": 1
                    },
                    {
                      "declaration": 48642,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "8646:15:44",
                      "valueSize": 1
                    },
                    {
                      "declaration": 48644,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "8698:10:44",
                      "valueSize": 1
                    }
                  ],
                  "id": 48649,
                  "nodeType": "InlineAssembly",
                  "src": "8529:231:44"
                }
              ]
            },
            "documentation": {
              "id": 48640,
              "nodeType": "StructuredDocumentation",
              "src": "8036:328:44",
              "text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toTypedDataHash",
            "nameLocation": "8378:15:44",
            "parameters": {
              "id": 48645,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48642,
                  "mutability": "mutable",
                  "name": "domainSeparator",
                  "nameLocation": "8402:15:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48651,
                  "src": "8394:23:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48641,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8394:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48644,
                  "mutability": "mutable",
                  "name": "structHash",
                  "nameLocation": "8427:10:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48651,
                  "src": "8419:18:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48643,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8419:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8393:45:44"
            },
            "returnParameters": {
              "id": 48648,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48647,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "8470:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48651,
                  "src": "8462:12:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48646,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "8462:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8461:14:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 48671,
            "nodeType": "FunctionDefinition",
            "src": "8970:191:44",
            "nodes": [],
            "body": {
              "id": 48670,
              "nodeType": "Block",
              "src": "9081:80:44",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "hexValue": "1900",
                            "id": 48664,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9125:10:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
                              "typeString": "literal_string hex\"1900\""
                            },
                            "value": "\u0019\u0000"
                          },
                          {
                            "id": 48665,
                            "name": "validator",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48654,
                            "src": "9137:9:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 48666,
                            "name": "data",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 48656,
                            "src": "9148:4:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
                              "typeString": "literal_string hex\"1900\""
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "expression": {
                            "id": 48662,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "9108:3:44",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 48663,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "9112:12:44",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "9108:16:44",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 48667,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9108:45:44",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 48661,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "9098:9:44",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 48668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "9098:56:44",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 48660,
                  "id": 48669,
                  "nodeType": "Return",
                  "src": "9091:63:44"
                }
              ]
            },
            "documentation": {
              "id": 48652,
              "nodeType": "StructuredDocumentation",
              "src": "8772:193:44",
              "text": " @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."
            },
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "toDataWithIntendedValidatorHash",
            "nameLocation": "8979:31:44",
            "parameters": {
              "id": 48657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48654,
                  "mutability": "mutable",
                  "name": "validator",
                  "nameLocation": "9019:9:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48671,
                  "src": "9011:17:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 48653,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9011:7:44",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 48656,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "9043:4:44",
                  "nodeType": "VariableDeclaration",
                  "scope": 48671,
                  "src": "9030:17:44",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 48655,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "9030:5:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9010:38:44"
            },
            "returnParameters": {
              "id": 48660,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 48659,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 48671,
                  "src": "9072:7:44",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 48658,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "9072:7:44",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9071:9:44"
            },
            "scope": 48672,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "ECDSAUpgradeable",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 48310,
          "nodeType": "StructuredDocumentation",
          "src": "174:205:44",
          "text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          48672
        ],
        "name": "ECDSAUpgradeable",
        "nameLocation": "388:16:44",
        "scope": 48673,
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "license": "MIT"
  },
  "id": 44
}